{"version":3,"file":"Trait-BSpO6eJY.js","sources":["../src/components/molecules/dnd5e/Advancements/Trait.svelte"],"sourcesContent":["<script>\n  import { getContext, onDestroy, onMount, tick } from \"svelte\";\n  import { ucfirst } from \"~/src/helpers/Utility\";\n  import { writable, derived } from \"svelte/store\";\n\n  export let advancement = null;\n\n  let grants = [];\n\n  function getBaseItemUUID(identifier) {\n    if (!identifier) {\n      return null;\n    }\n    window.GAS.log.d(\"identifier\", identifier);\n    let pack = CONFIG.DND5E.sourcePacks.ITEMS;\n    let [scope, collection, id] = identifier.split(\".\");\n    if (scope && collection) pack = `${scope}.${collection}`;\n    if (!id) id = identifier;\n    return `Compendium.${pack}.Item.${id}`;\n  }\n\n  const morphPool = (p) => {\n    const arr = Array.from(p);\n    const nuarr = arr.map((x) => {\n      const split = x.split(\":\");\n      if (split[2]) {\n        return { all: false, label: split[2], value: split[1], type: split[0] };\n      }\n      return { all: true, label: split[0], value: split[1] };\n    });\n    return nuarr;\n  };\n\n  const fromAll = (p) => {\n    return p.some((x) => {\n      return x.all;\n    });\n  };\n\n  let choices = advancement.configuration.choices.map((c) => {\n    return {\n      count: c.count,\n      pool: morphPool(c.pool),\n    };\n  });\n\n  const item = writable(null);\n\n  const fetchAndSetItem = async (uuid) => {\n    const itemObj = await fromUuid(uuid);\n    // window.GAS.log.d('Item', itemObj);\n    item.set(itemObj);\n  };\n\n  const processGrant = async (grant) => {\n    const split = grant.split(\":\");\n    // window.GAS.log.d('Trait split', split);\n    // window.GAS.log.d('switch', split[0]);\n    switch (split[0]) {\n      case \"languages\":\n        return { label: ucfirst(split[1]), value: ucfirst(split[2]) };\n      case \"tool\":\n        if(split[2]) {\n          return { label: ucfirst(split[2]), value: game.system.config.toolProficiencies[split[1]] };\n        } else {\n          const uuid = getBaseItemUUID(CONFIG.DND5E.toolIds[split[1]]);\n          await fetchAndSetItem(uuid);\n          let fetchedItem;\n          item.subscribe(value => {\n            fetchedItem = value;\n          })();\n          return { label: fetchedItem?.name, value: game.system.config.toolProficiencies[split[1]] };\n        }\n      case \"saves\":\n        return { label: game.system.config.abilities[split[1]].label, value: null };\n      case \"armor\":\n        return { label: game.system.config.armorProficiencies[split[1]], value: null };\n      case \"weapon\":\n        if(split[2]) {\n          return { label: ucfirst(split[2]), value: game.system.config.weaponProficiencies[split[1]] };\n        } else {\n          return { label: game.system.config.weaponProficiencies[split[1]], value: null };\n        }\n      case 'dr':\n        return { label: game.system.config.damageTypes[split[1]].label, value: split[1] };\n      default:\n        return {\n          label: game.system.config[split[0]][split[1]].label,\n          value: \"\",\n        };\n    }\n  };\n\n  const initializeGrants = async () => {\n    // window.GAS.log.d(\"Trait config\", advancement.configuration);\n    // window.GAS.log.d(\"Trait config\", advancement.configuration);\n    // window.GAS.log.d(\"Trait grants\", advancement.configuration.grants);\n    const grantPromises = Array.from(advancement.configuration.grants).map(processGrant);\n    grants = await Promise.all(grantPromises);\n    // window.GAS.log.d('Grants', grants);\n  };\n\n  onMount(async () => {\n    // window.GAS.log.d(\"Advancement\", advancement);\n    if (advancement.configuration.grants.size > 0) {\n      await initializeGrants();\n    }\n  });\n</script>\n\n\n<template lang=\"pug\">\n  .advancement.mt-sm(data-type=\"{advancement.type}\")\n    \n    //- pre {JSON.stringify(advancement)}\n\n    +if(\"grants.length > 0\")\n      +each(\"grants as grant\")\n        .flexrow\n          .flex.left {grant.label}\n          +if(\"grant.value\")\n            .flex0.right.badge.inset.nowrap {grant.value}\n\n    //- pre choices {JSON.stringify(choices)}\n    \n    +if(\"choices.length > 0\")\n      +each(\"choices as choice\")\n\n        //- pre choice {JSON.stringify(choice)}\n        //- pre choice.pool {JSON.stringify(choice.pool)}\n\n\n        +if(\"!fromAll(choice.pool)\")\n          .flexrow\n            h3.flex\n              span Choose&nbsp;\n              span &nbsp;{choice.count}&nbsp; \n              span of the following:\n\n          //- pre choice.pool {JSON.stringify(choice.pool)}\n          \n          +each(\"choice.pool as pool\")\n            \n            //- pre {JSON.stringify(pool)}\n\n            .flexrow\n              .flex.left {pool.label}\n              +if(\"pool.value\")\n                +if(\"pool.type == 'tool'\")\n                  .flex0.right.badge.inset.nowrap {game.system.config.toolProficiencies[pool.value] }\n                \n                  +else()\n                    .flex0.right.badge.inset {ucfirst(pool.value)}\n          +else()\n            .flexrow\n              .flex \n                span Choose&nbsp;\n                span {choice.count} \n              .flex0.badge.inset.right any\n  \n  </template>\n  \n  <style lang=\"sass\">\n  @import \"../../../../../styles/Mixins.scss\"\n  .advancement\n    @include inset\n\n    .badge.inset\n      @include badge()\n      @include inset\n\n</style>"],"names":["ctx"],"mappings":"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"}