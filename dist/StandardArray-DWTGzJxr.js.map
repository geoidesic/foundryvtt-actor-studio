{"version":3,"file":"StandardArray-DWTGzJxr.js","sources":["../src/components/molecules/dnd5e/AbilityEntry/StandardArray.svelte"],"sourcesContent":["<script>\n  import { log } from \"~/src/helpers/Utility\";\n  import { Timing } from \"@typhonjs-fvtt/runtime/util\";\n  import {\n    createEventDispatcher,\n    getContext,\n    onDestroy,\n    onMount,\n    tick,\n  } from \"svelte\";\n  import { abilities, race, isStandardArrayValues, abilityRolls } from \"~/src/helpers/store\";\n  import { MODULE_ID, STANDARD_ARRAY } from \"~/src/helpers/constants\";\n\n  export let document = false;\n\n  const dispatch = createEventDispatcher();\n  const doc = document || getContext(\"#doc\");\n  const updateDebounce = Timing.debounce(updateValue, 100);\n\n  async function updateValue(attr, value) {\n    // move the value to the next ability according to the direction of the arrow\n    const abilities = Object.keys(STANDARD_ARRAY);\n    // get index of attr from abilities\n    const index = abilities.indexOf(attr);\n    // game.system.log.d('abilities', abilities)\n    // game.system.log.d('index', index)\n    // game.system.log.d('value', value)\n    // game.system.log.d('attr', attr)\n    switch (value) {\n      case -1:\n        // move the value to the next ability according to the direction of the arrow\n        if (index < abilities.length - 1) {\n          const nextAbility = abilities[index + 1];\n          // game.system.log.d('nextAbility', nextAbility)\n          const options = {\n            system: {\n              abilities: {\n                [attr]: { value: $doc.system.abilities[nextAbility].value },\n                [nextAbility]: { value: $doc.system.abilities[attr].value },\n              },\n            },\n          };\n          // game.system.log.d('options', options)\n          await $doc.updateSource(options);\n          $doc = $doc;\n        }\n        break;\n\n      default:\n        // move the value to the next ability according to the direction of the arrow\n        if (index > 0) {\n          const nextAbility = abilities[index - 1];\n          // game.system.log.d('nextAbility', nextAbility)\n          const options = {\n            system: {\n              abilities: {\n                [attr]: { value: $doc.system.abilities[nextAbility].value },\n                [nextAbility]: { value: $doc.system.abilities[attr].value },\n              },\n            },\n          };\n          // game.system.log.d('options', options)\n          await $doc.updateSource(options);\n          $doc = $doc;\n        }\n        break;\n    }\n\n    // game.system.log.d(abilities)\n    // const options = {system: {abilities: { [attr]: {value: Number(event.target.value)}}}};\n    // $doc.updateSource(options)\n    // $doc = $doc\n  }\n\n  function reset() {\n    $abilityRolls = {};\n\n    const options = { system: { abilities: {} } };\n    systemAbilitiesArray.forEach((ability) => {\n      options.system.abilities[ability[1].abbreviation] = {\n        value: STANDARD_ARRAY[ability[1].abbreviation],\n      };\n    });\n    $doc.updateSource(options);\n    $doc = $doc;\n  }\n\n  function arraysMatch(array1, array2) {\n    if (array1.length !== array2.length) return false;\n\n    const sortedArray1 = array1.slice().sort((a, b) => a - b);\n    const sortedArray2 = array2.slice().sort((a, b) => a - b);\n\n    return sortedArray1.every((value, index) => value === sortedArray2[index]);\n  }\n\n  $: systemAbilities = game.system.config.abilities;\n  $: systemAbilitiesArray = Object.entries(systemAbilities);\n  $: raceFeatScore = 0;\n  $: abilityAdvancements =\n    $race?.advancement?.byType?.AbilityScoreImprovement?.[0].configuration\n      ?.fixed;\n  // $: isStandardArrayValues = arraysMatch(\n  //   Object.values(STANDARD_ARRAY),\n  //   systemAbilitiesArray.map(\n  //     (ability) => $doc.system.abilities[ability[1].abbreviation].value,\n  //   ),\n  // );\n  $: $isStandardArrayValues = arraysMatch(\n    Object.values(STANDARD_ARRAY),\n    systemAbilitiesArray.map(\n      (ability) => $doc.system.abilities[ability[1].abbreviation]?.value,\n    ),\n  );\n  // $: {\n  //   const currentAbilities = systemAbilitiesArray.map(\n  //     (ability) => {\n  //       game.system.log.d(ability) \n  //       return $doc.system.abilities[ability[1].abbreviation].value\n  //     }\n  //   );\n  //   const match = arraysMatch(STANDARD_ARRAY, currentAbilities);\n  //   isStandardArrayValues.set(match);\n  // }\n  onMount(async () => {\n    // game.system.log.d($doc.system.abilities)\n    // game.system.log.d(Object.keys($doc.system.abilities))\n    // game.system.log.d(isStandardArrayValues)\n    // if all the abilities are 10, set them to the standard array\n    if (\n      systemAbilitiesArray.every(\n        (ability) =>\n          $doc.system.abilities[ability[1].abbreviation]?.value === 10,\n      )\n    ) {\n      reset();\n    }\n  });\n</script>\n\n<template lang=\"pug\">\n.attribute-entry.mt-sm\n  h5.flexrow.mb-sm\n    .flex2.left Ability\n    .flex1.center Race / Feat\n    .flex1.center Base Score\n    .flex1.center Score\n    .flex1.center Modifier\n  .indent\n    +each(\"systemAbilitiesArray as ability, index\")\n      .flexrow.mb-sm\n        .flex2.left {ability[1].label}\n        .flex1.center.align-text-with-input\n          +if(\"abilityAdvancements?.[ability[1].abbreviation] > 0\")\n            span +\n          span {abilityAdvancements?.[ability[1].abbreviation] || 0}\n        .flex1.center.relative\n          input.left.small.mainscore(disabled type=\"number\" value=\"{$doc.system.abilities[ability[1].abbreviation]?.value}\")\n          .controls\n            .up.chevron\n              +if(\"index != 0\")\n                i.fas.fa-chevron-up(alt=\"Decrease\" on:click!=\"{updateDebounce(ability[1].abbreviation, 1)}\")\n            .down.chevron\n              +if(\"index != 5\")\n                i.fas.fa-chevron-down(alt=\"Increase\" on:click!=\"{updateDebounce(ability[1].abbreviation, -1)}\")\n        .flex1.center.align-text-with-input {(Number(abilityAdvancements?.[ability[1].abbreviation]) || 0) + Number($doc.system.abilities[ability[1].abbreviation]?.value || 0)}\n        .flex1.center.align-text-with-input \n          +if(\"$doc.system.abilities[ability[1].abbreviation]?.mod > 0\")\n            span +\n          span {$doc.system.abilities[ability[1].abbreviation]?.mod}\n    +if(\"!$isStandardArrayValues\")\n      hr\n      button.btn.btn-primary(on:click=\"{reset}\") Reset to Standard Array\n\n</template>\n\n<style lang=\"sass\">\n  .align-text-with-input\n    margin-top: 0.3rem\n  .green\n    color: green\n  .red\n    color: red\n  .mainscore\n    min-width: 40px\n  .controls\n    .chevron\n      position: absolute\n      font-size: 0.75rem\n      right: 0\n      cursor: pointer\n      background-color: rgba(0, 0, 0, 0.1)\n      &.up\n        padding: 1px 3px 0px 3px\n        top: 0\n        &:hover\n          background-color: rgba(140, 90, 0, 0.2)\n      &.down\n        padding: 1px 3px 0px 3px\n        bottom: 0\n        &:hover\n          background-color: rgba(140, 90, 0, 0.2)\n\n</style>\n"],"names":["ctx","attr"],"mappings":"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"}