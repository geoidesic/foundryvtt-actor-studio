{"version":3,"file":"Spells-CWS_GSLo.js","sources":["../src/components/organisms/dnd5e/Tabs/Spells.svelte"],"sourcesContent":["<script>\n  import { get } from 'svelte/store';\n  import { readOnlyTabs, isLevelUp, newLevelValueForExistingClass } from '../../../../stores/index';\n  import { characterClass, characterSubClass } from '../../../../stores/storeDefinitions';\n  import { localize as t, enrichHTML } from \"~/src/helpers/Utility\";\n  import { getContext, onDestroy, onMount, tick } from \"svelte\";\n  import { availableSpells, selectedSpells, maxSpellLevel, \n    initializeSpellSelection, loadAvailableSpells, addSpell, removeSpell,\n    spellLimits, currentSpellCounts, spellProgress, autoPopulateAllSpells\n  } from '../../../../stores/spellSelection';\n  import spellsKnownData from '../../../../stores/spellsKnown.json';\n  \n  const actor = getContext(\"#doc\");\n  \n  let loading = true;\n  let keywordFilter = '';\n  let expandedLevels = {};\n  let selectedSpellsList = [];\n  let scrolled = false;\n  let spellContainer;\n  let cleanup;\n\n  $: isDisabled = $readOnlyTabs.includes('spells');\n  $: actorObject = $actor.toObject();\n\n  // Get character class name for spell filtering and limits\n  $: characterClassName = $characterClass?.name || 'Bard'; // Default to Bard for testing\n  \n  // Calculate the effective character level for spell calculations\n  // For character creation: Always use level 1\n  // For level-up: Use the new level value\n  $: effectiveCharacterLevel = $isLevelUp && $newLevelValueForExistingClass \n    ? $newLevelValueForExistingClass \n    : 1; // Character creation is always level 1\n  \n  // Check if character class gets access to all spells\n  $: hasAllSpellsAccess = $spellLimits.hasAllSpells;\n  \n  // Calculate max spell level based on character class and the effective level\n  $: calculatedMaxSpellLevel = getMaxSpellLevelForClass(effectiveCharacterLevel, characterClassName);\n  \n  // For level-up scenarios, use the new level for spell level calculations\n  $: levelUpAwareMaxSpellLevel = $isLevelUp && $newLevelValueForExistingClass \n    ? getMaxSpellLevelForClass($newLevelValueForExistingClass, characterClassName)\n    : calculatedMaxSpellLevel;\n  \n  // Use our calculated max spell level if the store returns 0 (during character creation)\n  $: effectiveMaxSpellLevel = $maxSpellLevel > 0 ? $maxSpellLevel : levelUpAwareMaxSpellLevel;\n  \n  // Calculate old max spell level for level-up scenarios\n  $: oldMaxSpellLevel = $isLevelUp && $newLevelValueForExistingClass \n    ? getMaxSpellLevelForClass($newLevelValueForExistingClass - 1, characterClassName)\n    : 0;\n  \n  // Determine if auto-populate should be offered\n  $: shouldOfferAutoPopulate = hasAllSpellsAccess && (\n    !$isLevelUp || // Always offer during character creation\n    (effectiveMaxSpellLevel > oldMaxSpellLevel) // Only offer during level-up if max spell level increased\n  );\n  \n  // Check if this is a level-up with no new spell access\n  $: isLevelUpWithNoSpellUpdates = $isLevelUp && hasAllSpellsAccess && effectiveMaxSpellLevel <= oldMaxSpellLevel;\n  \n  // Debug logging for character data\n  $: {\n    console.log(`[SPELLS DEBUG] Character data:`, {\n      characterClass: $characterClass,\n      characterClassName,\n      effectiveCharacterLevel,\n      newLevelValueForExistingClass: $newLevelValueForExistingClass,\n      isLevelUp: $isLevelUp,\n      storeMaxSpellLevel: $maxSpellLevel,\n      calculatedMaxSpellLevel,\n      levelUpAwareMaxSpellLevel,\n      effectiveMaxSpellLevel,\n      spellLimits: $spellLimits,\n      progress: $spellProgress\n    });\n  }\n  \n  // Cache for enriched spell names\n  let enrichedNames = {};\n\n  // Helper to get enriched HTML for spell name\n  async function getEnrichedName(spell) {\n    const key = spell.uuid || spell._id || spell.id;\n    if (!enrichedNames[key]) {\n      // Create a UUID link if we have a UUID, otherwise fall back to plain name\n      let content;\n      if (spell.uuid) {\n        content = `@UUID[${spell.uuid}]{${spell.name}}`;\n      } else {\n        content = spell.name || \"\";\n      }\n      enrichedNames[key] = await enrichHTML(content, { async: true });\n    }\n    return enrichedNames[key];\n  }\n\n  // Calculate max spell level based on class and character level\n  function getMaxSpellLevelForClass(level, className) {\n    // Standard D&D 5e spellcasting progression for full casters\n    const fullCasters = ['Bard', 'Cleric', 'Druid', 'Sorcerer', 'Wizard'];\n    const halfCasters = ['Paladin', 'Ranger'];\n    const thirdCasters = ['Arcane Trickster', 'Eldritch Knight'];\n    const warlockProgression = ['Warlock'];\n    \n    if (fullCasters.includes(className)) {\n      // Full casters: spell level = Math.ceil(character level / 2), max 9\n      return Math.min(9, Math.ceil(level / 2));\n    } else if (halfCasters.includes(className)) {\n      // Half casters: spell level = Math.ceil((character level - 1) / 4), max 5\n      return Math.min(5, Math.ceil((level - 1) / 4));\n    } else if (thirdCasters.includes(className)) {\n      // Third casters: spell level = Math.ceil((character level - 2) / 6), max 4\n      return Math.min(4, Math.ceil((level - 2) / 6));\n    } else if (warlockProgression.includes(className)) {\n      // Warlocks have their own progression\n      if (level >= 17) return 5;\n      if (level >= 11) return 3;\n      if (level >= 7) return 2;\n      if (level >= 1) return 1;\n      return 0;\n    } else if (className === 'Artificer') {\n      // Artificers are half casters but start at level 2\n      if (level < 2) return 0;\n      return Math.min(5, Math.ceil((level - 1) / 4));\n    }\n    \n    // Non-spellcasting classes\n    return 0;\n  }\n\n  // Fetch spells when component mounts\n  onMount(async () => {\n    loading = true;\n    \n    // Initialize spell selection with current actor\n    initializeSpellSelection($actor);\n    \n    // Load available spells with character class filtering\n    await loadAvailableSpells(characterClassName);\n    \n    // Debug logging\n    console.log(`[SPELLS DEBUG] Loaded spells:`, {\n      totalSpells: $availableSpells.length,\n      effectiveCharacterLevel,\n      storeMaxSpellLevel: $maxSpellLevel,\n      calculatedMaxSpellLevel,\n      effectiveMaxSpellLevel,\n      characterClassName,\n      spellLimits,\n      sampleSpells: $availableSpells.slice(0, 5).map(s => ({\n        name: s.name,\n        level: s.system?.level,\n        classes: s.labels?.classes || []\n      }))\n    });\n    \n    loading = false;\n\n    // Find the actual scrolling container (section.a from PCAppShell)\n    const scrollingContainer = document.querySelector('#foundryvtt-actor-studio-pc-sheet section.a');\n    if (scrollingContainer) {\n      const handleScroll = () => {\n        scrolled = scrollingContainer.scrollTop > 0;\n      };\n      scrollingContainer.addEventListener('scroll', handleScroll);\n      \n      // Cleanup on destroy\n      cleanup = () => {\n        scrollingContainer.removeEventListener('scroll', handleScroll);\n      };\n    }\n  });\n\n  onDestroy(() => {\n    if (cleanup) {\n      cleanup();\n    }\n  });\n\n  // Update selected spells list when selectedSpells changes\n  $: {\n    if ($selectedSpells) {\n      selectedSpellsList = Array.from($selectedSpells.entries()).map(([spellId, { itemData }]) => ({\n        id: spellId,\n        spell: itemData\n      }));\n    }\n  }\n\n  // Filter spells by keyword and character class\n  $: filteredSpells = $availableSpells.filter(spell => {\n    const matchesKeyword = spell.name.toLowerCase().includes(keywordFilter.toLowerCase());\n    const spellLevel = spell.system?.level || 0;\n    const withinCharacterLevel = spellLevel <= effectiveMaxSpellLevel;\n    \n    // Filter by character class - check spell.labels.classes (it's a STRING, not array)\n    const spellClasses = spell.labels?.classes || '';\n    \n    // Check if the character class is in the spell's class string\n    // labels.classes is a STRING like \"Bard, Wizard\" not an array\n    const availableToClass = typeof spellClasses === 'string'\n      ? spellClasses.includes(characterClassName) ||\n        spellClasses.toLowerCase().includes(characterClassName.toLowerCase()) ||\n        spellClasses.trim().length === 0 // No restrictions (empty string)\n      : false;\n    \n    // Debug logging for spell filtering\n    if (spell.name === \"Acid Splash\" || spell.name === \"Cure Wounds\" || spellLevel === 1) {\n      console.log(`[SPELLS DEBUG] ${spell.name}:`, {\n        spell,\n        spellLevel,\n        storeMaxSpellLevel: $maxSpellLevel,\n        effectiveMaxSpellLevel,\n        withinCharacterLevel,\n        spellClasses,\n        characterClassName,\n        availableToClass,\n        matchesKeyword,\n        finalResult: matchesKeyword && withinCharacterLevel && availableToClass\n      });\n    }\n    \n    return matchesKeyword && withinCharacterLevel && availableToClass;\n  });\n\n  // Group spells by level\n  $: spellsByLevel = filteredSpells.reduce((acc, spell) => {\n    const level = spell.system?.level || 0;\n    const levelKey = level === 0 ? 'Cantrips' : `Level ${level}`;\n    if (!acc[levelKey]) {\n      acc[levelKey] = [];\n    }\n    acc[levelKey].push(spell);\n    return acc;\n  }, {});\n\n  // Debug logging for spell grouping\n  $: {\n    if (Object.keys(spellsByLevel).length > 0) {\n      console.log(`[SPELLS DEBUG] Spells by level:`, {\n        totalFiltered: filteredSpells.length,\n        groupedByLevel: Object.keys(spellsByLevel).map(level => ({\n          level,\n          count: spellsByLevel[level].length,\n          samples: spellsByLevel[level].slice(0, 3).map(s => s.name)\n        }))\n      });\n    }\n  }\n\n  $: spellLevels = Object.keys(spellsByLevel).sort((a, b) => {\n    if (a === 'Cantrips') return -1;\n    if (b === 'Cantrips') return 1;\n    const levelA = parseInt(a.replace('Level ', ''));\n    const levelB = parseInt(b.replace('Level ', ''));\n    return levelA - levelB;\n  });\n\n  // Toggle spell level expansion\n  function toggleSpellLevel(level) {\n    expandedLevels[level] = !expandedLevels[level];\n    expandedLevels = { ...expandedLevels };\n  }\n\n  // Add spell to selection\n  async function addToSelection(spell) {\n    // Always get the latest store values to avoid stale cap checks\n    await tick();\n    const spellLevel = spell.system?.level || 0;\n    const isCantrip = spellLevel === 0;\n    const counts = get(currentSpellCounts);\n    const limits = get(spellLimits);\n\n    // Strict enforcement: check if adding this spell would exceed limits\n    if (isCantrip && counts.cantrips >= limits.cantrips) {\n      ui.notifications?.warn(t('Spells.CantripLimitReached'));\n      return;\n    }\n    if (!isCantrip && counts.spells >= limits.spells) {\n      ui.notifications?.warn(t('Spells.SpellLimitReached'));\n      return;\n    }\n    \n    // Double-check that we're not adding duplicates\n    const spellId = spell.id || spell._id;\n    const currentSelections = get(selectedSpells);\n    if (currentSelections.has(spellId)) {\n      ui.notifications?.warn('Spell already selected');\n      return;\n    }\n    \n    await addSpell(spell);\n  }\n\n  // Remove spell from selection\n  function removeFromSelection(spellId) {\n    removeSpell(spellId);\n  }\n\n  // Auto-populate all spells for classes that get all spells\n  async function autoPopulateSpells() {\n    if (!hasAllSpellsAccess) {\n      ui.notifications?.warn('This class does not have access to all spells');\n      return;\n    }\n    \n    try {\n      const success = await autoPopulateAllSpells(\n        characterClassName, \n        effectiveMaxSpellLevel, \n        $actor, \n        $isLevelUp, \n        oldMaxSpellLevel\n      );\n      if (success) {\n        // Refresh the selected spells list\n        await tick();\n      }\n    } catch (error) {\n      console.error('Error auto-populating spells:', error);\n      ui.notifications?.error('Failed to auto-populate spells');\n    }\n  }\n\n  // Get spell school display name\n  function getSchoolName(spell, forList = false) {\n    const school = spell.system?.school;\n    if (!school || school === 'Unknown') {\n      return forList ? '' : '—';\n    }\n    return school;\n  }\n\n  // Get spell level display\n  function getSpellLevelDisplay(spell) {\n    const level = spell.system?.level || 0;\n    return level === 0 ? t('Spells.Cantrip') : `${t('Spells.Level')} ${level}`;\n  }\n\n  // Get casting time display\n  function getCastingTimeDisplay(spell) {\n    window.GAS.log.q(spell)\n    return spell.system?.activation?.value && spell.system?.activation?.type \n      ? `${spell.system.activation.value} ${spell.system.activation.type}`\n        : spell.system?.activation?.type ? spell.system?.activation?.type\n      : 'Unknown';\n  }\n\n  const containerClasses = {readonly: isDisabled};\n  const gridClasses = {hidden: scrolled}\n  const spellCountCss = {\"at-limit\": $currentSpellCounts.cantrips >= $spellLimits.cantrips}\n  const spellLimitsCss = {\"at-limit\": $currentSpellCounts.spells >= $spellLimits.spells}\n</script>\n\n<template lang=\"pug\">\nspells-tab-container(class=\"{containerClasses}\")\n \n  +if(\"isDisabled\")\n    .info-message {t('Spells.SpellsReadOnly')}\n    +elseif(\"isLevelUpWithNoSpellUpdates\")\n      .info-message.no-updates-notice\n        p \n          strong No spell updates needed for this level-up\n        p \n          | {characterClassName}s have access to all spells of appropriate level. At level {$newLevelValueForExistingClass}, you still have access to the same spell levels (1-{effectiveMaxSpellLevel}) as before.\n        p \n          em Your spell selection is complete - no changes needed.\n    +elseif(\"shouldOfferAutoPopulate\")\n      .info-message.all-spells-notice\n        p \n          strong {characterClassName}s \n          | have access to all spells of appropriate level. You only need to select the cantrips you want to know - all other spells can be prepared during gameplay.\n        p \n          em Note: You still need to select your cantrips as they cannot be changed later.\n        .auto-populate-section\n          button.auto-populate-btn(\n            on:click!=\"{ () => autoPopulateSpells() }\" \n            disabled=\"{isDisabled || loading}\"\n          )\n            i.fas.fa-magic\n            +if(\"$isLevelUp && effectiveMaxSpellLevel > oldMaxSpellLevel\")\n              span Auto-populate New Level {effectiveMaxSpellLevel} Spells\n              +else()\n                span Auto-populate All Spells (Levels 1-{effectiveMaxSpellLevel})\n  .sticky-header(class:hidden=\"{!scrolled}\")\n    .panel-header-grid\n      .grid-item.label {t('Spells.Cantrips')}:\n      .grid-item.value(class=\"{spellCountCss}\") {$currentSpellCounts.cantrips}/{$spellLimits.cantrips}\n      .grid-item.label {t('Spells.Spells')}:\n      .grid-item.value(class=\"{spellLimitsCss}\") {$currentSpellCounts.spells}/{$spellLimits.spells === 999 ? 'All' : $spellLimits.spells}\n  .spells-tab\n    .left-panel(bind:this=\"{spellContainer}\")\n      .panel-header-grid(class:hidden=\"{scrolled}\")\n        .grid-item.label {t('Spells.Cantrips')}:\n        .grid-item.value(class=\"{spellCountCss}\") {$currentSpellCounts.cantrips}/{$spellLimits.cantrips}\n        .grid-item.label {t('Spells.Spells')}:\n        .grid-item.value(class=\"{spellLimitsCss}\") {$currentSpellCounts.spells}/{$spellLimits.spells === 999 ? 'All' : $spellLimits.spells}\n      h3 {t('Spells.SelectedSpells')}\n\n      .selected-spells\n        +if(\"selectedSpellsList.length === 0\")\n          .empty-selection\n            p {t('Spells.NoSpellsSelected')}      \n\n          +else()\n            +each(\"selectedSpellsList as selectedSpell\")\n              .selected-spell\n                .spell-col1\n                  img.spell-icon( alt=\"{selectedSpell.spell.name}\" src=\"{selectedSpell.spell.img}\")\n                .spell-col2.left            \n                  .spell-name\n                    +await(\"getEnrichedName(selectedSpell.spell)\")\n                      span {selectedSpell.spell.name}\n                      +then(\"Html\")\n                        span {@html Html}\n                      +catch(\"error\")\n                        span {selectedSpell.spell.name}\n\n\n                  .spell-subdetails\n                    span.spell-level {getSpellLevelDisplay(selectedSpell.spell)}\n                    span.spell-school {getSchoolName(selectedSpell.spell)}\n\n                .spell-col3\n                  button.remove-btn(on:click!=\"{ () => removeFromSelection(selectedSpell.id) }\" disabled=\"{isDisabled}\")\n                    i.fas.fa-trash\n\n    .right-panel.spell-list\n      h3 {t('Spells.AvailableSpells')} | {characterClassName}\n      .filter-container.mb-sm\n        input.keyword-filter(type=\"text\" bind:value=\"{keywordFilter}\" placeholder=\"{t('Spells.FilterPlaceholder')}\" disabled=\"{isDisabled}\")\n      +if(\"loading\")\n        .loading {t('Spells.Loading')}\n        +elseif(\"filteredSpells.length === 0\")\n          .empty-state\n            p {keywordFilter ? t('Spells.NoMatchingSpells') : t('Spells.NoSpells')}\n          +else()\n            +each(\"spellLevels as spellLevel\")\n\n              .spell-level-group\n                h4.left.mt-sm.flexrow.spell-level-header.pointer(on:click!=\"{ () => toggleSpellLevel(spellLevel) }\")\n                  .flex0.mr-xs\n                    +if(\"expandedLevels[spellLevel]\")\n                      span [-]\n                      +else()\n                        span [+]\n                  .flex1 {spellLevel} ({spellsByLevel[spellLevel].length})\n\n                +if(\"expandedLevels[spellLevel]\")\n                  ul.blank\n                    +each(\"spellsByLevel[spellLevel] as spell (spell.uuid || spell._id)\")\n                      li.flexrow.spell-row.justify-flexrow-vertical\n                        .flex0.spell-details\n                          img.spell-icon.cover(src=\"{spell.img}\" alt=\"{spell.name}\")\n\n                        .flex1.spell-info\n                          .flexrow\n                            .flex1.left.spell-name.gold\n                              +await(\"getEnrichedName(spell)\")\n                                span {spell.name}\n                                +then(\"Html\")\n                                  span {@html Html}\n                                +catch(\"error\")\n                                  span {spell.name}\n                          .flexrow.smalltext\n\n                            .flex1.left.spell-meta\n                              +if(\"getSchoolName(spell, true)\")\n                                .flexrow.gap-10\n                                  .flex2.flexrow\n                                    div School:\n                                    .badge {getSchoolName(spell, true)}\n                                  .flex2.flexrow \n                                    div Activation\n                                    .badge {getCastingTimeDisplay(spell)}\n\n                        .spell-actions.mx-sm\n                          button.add-btn(on:click|preventDefault!=\"{ () => addToSelection(spell) }\" disabled=\"{isDisabled}\")\n                            i.fas.fa-plus\n</template>\n\n<style lang=\"sass\">\n  @import \"../../../../../styles/Mixins.sass\"\n\n  .badge\n    +badge(var(--color-cool-3), 0.5rem)\n    margin-top: -2px\n    margin-left: -8px\n  :global(.GAS.theme-dark .selected-spell .spell-level)\n    color: silver\n\n  :global(.GAS.theme-dark .spell-row .spell-meta .spell-school)\n    color: silver\n  :global(.GAS.theme-dark .selected-spell .spell-school)\n    color: silver !important\n\n  .spells-tab-container \n    height: 100%\n    width: 100%\n    display: flex\n    flex-direction: column\n\n    &.readonly\n      opacity: 0.7\n      pointer-events: none\n      \n      :global(*)\n        cursor: default !important\n    \n  ul.blank\n     padding: 0 \n  .info-message\n    font-size: 0.8rem\n    color: #666\n    font-style: italic\n    margin: 1rem\n    padding: 1rem\n    background: rgba(0, 0, 0, 0.05)\n    border-radius: var(--border-radius)\n    \n    &.all-spells-notice\n      background: rgba(0, 128, 0, 0.1)\n      border: 1px solid rgba(0, 128, 0, 0.2)\n      color: var(--gas-color-text)\n      font-style: normal\n      \n      strong\n        color: var(--dnd5e-color-gold, #b59e54)\n        \n      em\n        font-size: 0.9em\n        color: var(--gas-color-text)\n        opacity: 0.8\n    \n    &.no-updates-notice\n      background: rgba(66, 109, 190, 0.1)\n      border: 1px solid rgba(66, 109, 190, 0.3)\n      color: var(--gas-color-text)\n      font-style: normal\n      text-align: center\n      \n      strong\n        color: var(--as-blue)\n        font-size: 1.1em\n        \n      em\n        font-size: 0.9em\n        color: var(--gas-color-text)\n        opacity: 0.8\n        \n      .auto-populate-section\n        margin-top: 1rem\n        \n        .auto-populate-btn\n          background: linear-gradient(135deg, #28a745, #20c997)\n          color: white\n          border: none\n          padding: 0.75rem 1.5rem\n          border-radius: 6px\n          font-size: 0.95rem\n          font-weight: 600\n          cursor: pointer\n          display: flex\n          align-items: center\n          gap: 0.5rem\n          transition: all 0.3s ease\n          box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3)\n          \n          &:hover:not(:disabled)\n            background: linear-gradient(135deg, #218838, #1ba085)\n            transform: translateY(-2px)\n            box-shadow: 0 4px 12px rgba(40, 167, 69, 0.4)\n            \n          &:active\n            transform: translateY(0)\n            \n          &:disabled\n            opacity: 0.6\n            cursor: not-allowed\n            transform: none\n            box-shadow: none\n            \n          i.fas.fa-magic\n            font-size: 1.1em\n\n  .sticky-header\n    position: sticky\n    top: 27px\n    left: 20px\n    z-index: 5\n    max-width: 200px\n    &.hidden\n      display: none\n\n  .spells-tab\n    display: flex\n    height: 100%\n    width: 100%\n    flex: 1\n\n  .left-panel\n    flex: 1\n    max-width: 40%\n    min-width: 250px\n    border-right: 1px solid var(--color-border-light-tertiary)\n    padding: 1rem\n    overflow-y: auto\n    \n    .panel-header\n      margin-bottom: 1rem\n      &.hidden\n        display: none\n        \n    h3\n      margin-bottom: 0.5rem\n      \n    .spell-limits\n        display: flex\n        flex-direction: column\n        gap: 0.25rem\n        margin-bottom: 1rem\n        \n        .limit-display\n          font-size: 0.9rem\n          padding: 0.25rem 0.5rem\n          background: rgba(0, 128, 0, 0.1)\n          border-radius: 4px\n          \n          &.at-limit\n            background: rgba(255, 0, 0, 0.1)\n            color: #cc0000\n\n        .progress-section\n          margin-top: 1rem\n          margin-bottom: 1rem\n          \n          .progress-header\n            display: flex\n            justify-content: space-between\n            align-items: center\n            margin-bottom: 0.5rem\n            font-size: 0.9rem\n            \n            .progress-text\n              color: var(--color-text)\n              \n            .progress-percentage\n              font-weight: bold\n              color: var(--color-text-primary)\n              \n          .progress-bar\n            width: 100%\n            height: 8px\n            background: var(--color-border-light-tertiary)\n            border-radius: 4px\n            overflow: hidden\n            \n            .progress-fill\n              height: 100%\n              background: linear-gradient(90deg, #28a745, #20c997)\n              border-radius: 4px\n              transition: width 0.3s ease\n      \n    .selected-spells\n      max-height: 60vh\n      overflow-y: auto\n      \n    .empty-selection\n      text-align: center\n      color: #666\n      font-style: italic\n      padding: 2rem\n      \n    .selected-spell\n      display: flex\n      align-items: center\n      padding: 0.5rem\n      border: 1px solid var(--color-border-light-tertiary)\n      margin-bottom: 0.5rem\n      border-radius: 4px\n      background: var(--color-bg)\n      \n      .spell-col1, .spell-col3\n        flex: 0 0 auto\n        \n      .spell-col2\n        flex: 1\n        margin: 0 0.5rem\n        \n      .spell-icon\n        width: 32px\n        height: 32px\n        border-radius: 4px\n        border: 1px solid var(--color-border-light-tertiary)\n        \n      .spell-name\n        font-weight: bold\n        display: block\n        \n      .spell-subdetails\n        font-size: 0.85em\n        color: #666\n        display: flex\n        gap: 0.5rem\n        \n        .spell-level, .spell-school\n          background: rgba(0, 0, 0, 0.05)\n          padding: 0.125rem 0.25rem\n          border-radius: 3px\n          \n      .remove-btn\n        background: none\n        border: none\n        cursor: pointer\n        padding: 0.25rem 0 0.25rem 0.25rem\n        border-radius: 3px\n        line-height: 1\n        \n        &:hover\n          background: rgba(153, 0, 0, 0.1)\n\n        &:disabled\n          opacity: 0.5\n          cursor: not-allowed\n          &:hover\n            background: none\n\n  .right-panel\n    flex: 2\n    padding: 1rem\n    overflow-y: auto\n    \n    .filter-container\n      margin-bottom: 1rem\n      \n    .keyword-filter\n      width: 100%\n      padding: 0.5rem\n      border: 1px solid var(--color-border-light-tertiary)\n      border-radius: 4px\n      background: var(--color-bg)\n      color: var(--color-text)\n      \n    .loading, .empty-state\n      text-align: center\n      color: #666\n      font-style: italic\n      padding: 2rem\n      \n    .spell-level-group\n      margin-bottom: 1rem\n      position: relative\n      \n    .spell-level-header\n      background: var(--color-bg-btn)\n      padding: 0.5rem\n      border-radius: 4px\n      cursor: pointer\n      font-weight: bold\n      border: 1px solid var(--color-border-light-tertiary)\n      \n      &:hover\n        background: var(--color-bg-btn-hover)\n        \n    .spell-row\n      position: relative\n     \n      border: 1px solid var(--color-border-light-tertiary)\n      margin-bottom: 0.25rem\n      border-radius: 4px\n      background: var(--color-bg)\n      min-height: 40px\n      \n      &:hover\n        background: var(--color-bg-btn)\n        \n      .spell-details\n        min-width: 50px\n        \n        .spell-icon\n          width: 40px\n          height: 40px\n          border-radius: 4px\n          flex-shrink: 0\n          object-fit: cover\n          position: absolute\n          border-top: 1px solid var(--dnd5e-color-gold)\n          border-left: 1px solid var(--dnd5e-color-gold)\n          border-bottom: 1px solid var(--dnd5e-color-gold)\n          border-right: none\n          border-top-right-radius: 0\n          border-bottom-right-radius: 0\n          left: -1px\n          top: 0px\n          margin-top: -1px\n\n          img\n            border: none\n\n          \n        .spell-info\n          \n          .spell-name\n            font-weight: bold\n            \n          .spell-meta\n            font-size: 0.85em\n            color: #666\n            display: flex\n            gap: 0.5rem\n            \n            .spell-school, .casting-time\n              background: rgba(0, 0, 0, 0.05)\n              padding: 0.125rem 0.25rem\n              border-radius: 3px\n            \n      .spell-actions\n        flex: 0 0 auto\n        \n        .add-btn\n          background: var(--dnd5e-color-gold, #b59e54)\n          border: none\n          width: 24px\n          height: 24px\n          border-radius: 3px\n          color: black\n          display: flex\n          align-items: center\n          justify-content: center\n          cursor: pointer\n\n          i.fas.fa-plus\n            margin-right: 0\n            margin-left: 0\n\n          &:hover\n            background: darken(#b59e54, 10%)\n\n          &:disabled\n            opacity: 0.5\n            cursor: not-allowed\n            &:hover\n              background: var(--dnd5e-color-gold, #b59e54)\n\n  .finalize-section\n    position: sticky\n    bottom: 0\n    left: 0\n    right: 0\n    padding: 1rem\n    background: var(--color-bg)\n    border-top: 1px solid var(--color-border-light-tertiary)\n    z-index: 10\n    \n    .finalize-btn\n      width: 100%\n      padding: 1rem 2rem\n      background: linear-gradient(135deg, #28a745, #20c997)\n      color: white\n      border: none\n      border-radius: 8px\n      font-size: 1rem\n      font-weight: bold\n      cursor: pointer\n      display: flex\n      align-items: center\n      justify-content: center\n      gap: 0.5rem\n      transition: all 0.3s ease\n      box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3)\n      \n      &:hover\n        background: linear-gradient(135deg, #218838, #1ba085)\n        transform: translateY(-2px)\n        box-shadow: 0 6px 16px rgba(40, 167, 69, 0.4)\n        \n      &:active\n        transform: translateY(0)\n        \n      &:disabled\n        opacity: 0.6\n        cursor: not-allowed\n        transform: none\n        box-shadow: none\n\n  .spell-icon.cover\n    width: 48px\n    height: 48px\n    object-fit: cover\n    border-radius: 4px\n    border: 1px solid var(--color-border-light-tertiary)\n\n  .panel-header-grid\n    display: grid\n    grid-template-columns: 1fr 0.4fr 1fr 0.4fr\n    grid-template-rows: repeat(2, auto)\n    padding: 0.3rem 0.1rem\n    gap: 4px\n    margin-bottom: 1.5rem\n    align-items: center\n    background-color: var(--li-background-color)\n    border-radius: var(--border-radius)\n    border-collapse: none\n    .label\n      font-size: 0.95em\n      color: var(--dnd5e-color-gold)\n      text-align: right\n      font-weight: 600\n    .value\n      font-size: 1.1em\n      font-weight: bold\n      text-align: left\n      &.at-limit\n        color: #cc0000\n</style>"],"names":["ctx","t","get"],"mappings":"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"}